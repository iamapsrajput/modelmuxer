[tool.poetry]
name = "modelmuxer"
version = "1.0.0"
description = "Enterprise-grade intelligent LLM routing engine for cost and performance optimization"
authors = ["Ajay Rajput <ajay@modelmuxer.com>"]
license = "Business Source License 1.1"
readme = "README.md"
homepage = "https://github.com/ajayrajput/modelmuxer"
repository = "https://github.com/ajayrajput/modelmuxer"
documentation = "https://modelmuxer.readthedocs.io"
keywords = [
    "llm",
    "routing",
    "ai",
    "cost-optimization",
    "api",
    "enterprise",
    "cascade-routing",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
packages = [{ include = "app" }]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.116.1"
uvicorn = { extras = ["standard"], version = "^0.35.0" }
httpx = "^0.28.1"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
# Replaced python-jose with pyjwt for better security
python-multipart = "^0.0.18"
redis = "^5.0.0"
sqlalchemy = "^2.0.0"
alembic = "^1.12.0"
aiosqlite = "^0.21.0"
structlog = "^23.2.0"
# Tiktoken for OpenAI tokenization and LiteLLM compatibility
tiktoken = "^0.7.0"
tenacity = "^8.2.0"
cachetools = "^5.3.0"
psutil = "^5.9.0"
pyjwt = { extras = ["cryptography"], version = "^2.10.1" }
# LiteLLM for unified LLM API access
litellm = "^1.55.0"
# Enterprise features
asyncpg = "^0.30.0"
cryptography = "^44.0.2"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
email-validator = "^2.1.0"
# Security fixes for vulnerabilities - using cryptography instead of ecdsa
bleach = "^6.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-env = "^1.1.3"
pytest-benchmark = "^4.0.0"
black = "^24.3.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
bandit = "^1.7.5"
safety = "^2.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
pip-audit = "^2.6.0"
types-psutil = "^7.0.0.20250801"
interrogate = "^1.7.0"
pip-licenses = "^5.0.0"

[tool.poetry.group.jupyter]
optional = true

[tool.poetry.group.jupyter.dependencies]
ipython = "^8.0.0"
jupyter = "^1.0.0"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
sentence-transformers = "^3.1.0"
# NOTE: CVE-2025-3730 affects torch <= 2.7.1 - waiting for 2.7.2+ release
# Vulnerability: PyTorch Improper Resource Shutdown (Low severity, local attack only)
torch = ">=2.7.1,<3.0.0"
transformers = "^4.30.0"
datasets = "^2.14.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"

[tool.poetry.group.monitoring]
optional = true

[tool.poetry.group.monitoring.dependencies]
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-instrumentation-fastapi = "^0.41b0"

[tool.poetry.scripts]
modelmuxer = "app.main:cli"
modelmuxer-server = "app.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "N",     # pep8-naming
    "Q",     # flake8-quotes
    "SIM",   # flake8-simplify
    "ARG",   # flake8-unused-arguments
    "PIE",   # flake8-pie
    "LOG",   # flake8-logging-format
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TRY",   # tryceratops
    "NPY",   # numpy-v2
    "AIR",   # flake8-airflow
    "COM",   # flake8-commas
    "DTZ",   # flake8-datetimez
    "T20",   # flake8-print
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "G",     # flake8-logging
    "INP",   # flake8-no-pep420
    "PTH",   # flake8-use-pathlib
    "RSE",   # flake8-raise
    "FBT",   # flake8-boolean-trap
    "A",     # flake8-builtins
    "C90",   # mccabe
    "ICN",   # flake8-import-conventions
    "BLE",   # flake8-blind-except
    "FURB",  # refurb
    "ASYNC", # flake8-async
    "S",     # bandit
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
    "COM812",  # trailing comma missing
    "Q000",    # single quotes found but double quotes preferred
    "T201",    # print found
    "BLE001",  # do not catch blind exception
    "TRY003",  # avoid specifying long messages outside the exception class
    "TRY301",  # abstract raise to an inner function
    "TRY400",  # use logging.exception instead of logging.error
    "TRY300",  # consider moving this statement to an else block
    "RET505",  # unnecessary else after return statement
    "RET506",  # unnecessary elif after raise statement
    "RET504",  # unnecessary assignment before return statement
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "FBT001",  # boolean-typed positional argument in function definition
    "FBT002",  # boolean default positional argument in function definition
    "FBT003",  # boolean positional value in function call
    "DTZ003",  # use of datetime.datetime.utcnow() is not allowed
    "DTZ005",  # use of datetime.datetime.now() without tz argument is not allowed
    "PIE790",  # unnecessary pass statement
    "SIM102",  # use a single if statement instead of nested if statements
    "SIM105",  # use contextlib.suppress instead of try-except-pass
    "SIM110",  # use return any(...) instead of for loop
    "SIM114",  # combine if branches using logical or operator
    "SIM117",  # use a single with statement with multiple contexts
    "UP006",   # use list instead of List for type annotation
    "UP007",   # use X | Y for type annotations
    "UP035",   # typing.Dict is deprecated, use dict instead
    "UP037",   # remove quotes from type annotation
    "W191",    # indentation contains tabs
    "W291",    # trailing whitespace
    "W293",    # blank line contains whitespace
    "I001",    # import block is un-sorted or un-formatted
    "E402",    # module level import not at top of file
    "F401",    # imported but unused
    "F821",    # undefined name
    "F841",    # local variable is assigned to but never used
    "S101",    # use of assert detected
    "S104",    # possible binding to all interfaces
    "S105",    # possible hardcoded password assigned to
    "S106",    # possible hardcoded password assigned to argument
    "S110",    # try-except-pass detected, consider logging the exception
    "S113",    # probable use of requests call without timeout
    "S311",    # standard pseudo-random generators are not suitable for cryptographic purposes
    "PTH118",  # os.path.join() should be replaced by Path with / operator
    "PTH120",  # os.path.dirname() should be replaced by Path.parent
    "PTH123",  # open() should be replaced by Path.open()
    "INP001",  # file is part of an implicit namespace package
    "ICN001",  # numpy should be imported as np
    "SLF001",  # private member accessed
    "N805",    # first argument of a method should be named self
    "G201",    # logging.exception should be used instead of logging.error
    "E731",    # do not assign a lambda expression, use a def
    "SIM118",  # use key in dict instead of key in dict.keys()
    "S301",    # pickle and modules that wrap it can be unsafe when used to deserialize untrusted data
    "ASYNC1",  # async functions should not call open, time.sleep, or subprocess methods
    "A001",    # variable is shadowing a Python builtin
    "DTZ011",  # use of datetime.date.today() is not allowed, use datetime.datetime.now(tz=).date() instead
    "RET508",  # unnecessary elif after break statement
    "TRY002",  # create your own exception
    "SIM103",  # return the condition directly
    "ISC001",  # conflicts with formatter
]
exclude = [
    ".venv",
    "build",
    "dist",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    "htmlcov",
    "*.egg-info",
    "tests",         # Exclude tests from strict linting
    "scripts",       # Exclude scripts from strict linting
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = false
strict_equality = true
# Exclude problematic modules during migration to zero errors
exclude = [
    "app/routing/*",
    "app/providers/*",
    "app/config/enhanced_config.py",
    "app/classification/*",
    "app/main.py",
    "app/router.py",
    "app/database.py",
    "app/cost_tracker.py",
    "app/security/*",
    "app/middleware/*",
    "app/enterprise/*",
    "tests/*",
]

[[tool.mypy.overrides]]
module = [
    "sentence_transformers.*",
    "sklearn.*",
    "prometheus_client.*",
    "tiktoken.*",
    "opentelemetry.*",
    "numpy.*",
]
ignore_missing_imports = true

# Temporarily allow untyped defs in complex modules during migration
[[tool.mypy.overrides]]
module = ["app.routing.*", "app.cache.*", "app.providers.*", "tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_return_any = false
disallow_any_generics = false
no_implicit_optional = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Bandit security linting configuration
exclude_dirs = ["tests", ".venv", "htmlcov"]
# Exclude test files
exclude = ["*/test_*.py", "**/test_*.py"]
