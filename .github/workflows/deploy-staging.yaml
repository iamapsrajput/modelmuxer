# ModelMuxer (c) 2025 Ajay Rajput
# Licensed under Business Source License 1.1 ‚Äì see LICENSE for details.

name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy"
        required: false
        default: "develop"

env:
  KUBE_NAMESPACE: modelmuxer-staging
  DEPLOYMENT_NAME: modelmuxer-staging
  ENVIRONMENT: staging

jobs:
  deploy:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    # yamllint disable-line rule:truthy
    environment: staging # GitHub Environment - configure in repo Settings > Environments
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: "3.12.0"

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.KUBE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy PostgreSQL (if not exists)
        run: |
          if ! helm list -n ${{ env.KUBE_NAMESPACE }} | grep -q postgresql-staging; then
            helm install postgresql-staging bitnami/postgresql \
              --namespace ${{ env.KUBE_NAMESPACE }} \
              --set auth.postgresPassword=${{ secrets.POSTGRES_PASSWORD }} \
              --set auth.database=modelmuxer \
              --set primary.persistence.size=20Gi \
              --set readReplicas.replicaCount=1 \
              --set readReplicas.persistence.size=20Gi \
              --wait --timeout=10m
          fi

      - name: Deploy Redis (if not exists)
        run: |
          if ! helm list -n ${{ env.KUBE_NAMESPACE }} | grep -q redis-staging; then
            helm install redis-staging bitnami/redis \
              --namespace ${{ env.KUBE_NAMESPACE }} \
              --set auth.password=${{ secrets.REDIS_PASSWORD }} \
              --set replica.replicaCount=2 \
              --set master.persistence.size=8Gi \
              --set replica.persistence.size=8Gi \
              --wait --timeout=10m
          fi

      - name: Create secrets
        run: |
          # Create or update application secrets
          kubectl create secret generic modelmuxer-secrets \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --from-literal=DATABASE_URL="postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@postgresql-staging:5432/modelmuxer" \
            --from-literal=REDIS_URL="redis://:${{ secrets.REDIS_PASSWORD }}@redis-staging-master:6379/0" \
            --from-literal=JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            --from-literal=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --from-literal=ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            --from-literal=GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
            --from-literal=MISTRAL_API_KEY="${{ secrets.MISTRAL_API_KEY }}" \
            --from-literal=GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" \
            --from-literal=ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy ModelMuxer
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag || 'develop' }}"

          helm upgrade --install ${{ env.HELM_RELEASE }} ./helm/modelmuxer \
            --namespace ${{ env.KUBE_NAMESPACE }} \
            --set image.tag="${IMAGE_TAG}" \
            --set environment="${{ env.ENVIRONMENT }}" \
            --set replicaCount=2 \
            --set resources.requests.cpu=200m \
            --set resources.requests.memory=512Mi \
            --set resources.limits.cpu=1000m \
            --set resources.limits.memory=2Gi \
            --set ingress.enabled=true \
            --set ingress.hosts[0].host=staging-api.modelmuxer.com \
            --set ingress.hosts[0].paths[0].path=/ \
            --set ingress.hosts[0].paths[0].pathType=Prefix \
            --set ingress.tls[0].secretName=modelmuxer-staging-tls \
            --set ingress.tls[0].hosts[0]=staging-api.modelmuxer.com \
            --set postgresql.enabled=false \
            --set redis.enabled=false \
            --set externalDatabase.host=postgresql-staging \
            --set externalDatabase.database=modelmuxer \
            --set externalDatabase.existingSecret=modelmuxer-secrets \
            --set externalDatabase.existingSecretPasswordKey=DATABASE_URL \
            --set externalRedis.host=redis-staging-master \
            --set externalRedis.existingSecret=modelmuxer-secrets \
            --set externalRedis.existingSecretPasswordKey=REDIS_URL \
            --wait --timeout=10m

      - name: Run database migrations
        run: |
          kubectl run migration-job-$(date +%s) \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --image=ghcr.io/${{ github.repository_owner }}/modelmuxer:${{ github.event.inputs.image_tag || 'develop' }} \
            --restart=Never \
            --env="DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@postgresql-staging:5432/modelmuxer" \
            --command -- python -m alembic upgrade head

          # Wait for migration to complete
          kubectl wait --for=condition=complete --timeout=300s job/migration-job-* -n ${{ env.KUBE_NAMESPACE }}

      - name: Verify deployment
        run: |
          # Wait for deployment to be ready
          kubectl rollout status deployment/${{ env.HELM_RELEASE }} -n ${{ env.KUBE_NAMESPACE }} --timeout=300s

          # Check pod status
          kubectl get pods -n ${{ env.KUBE_NAMESPACE }} -l app.kubernetes.io/name=modelmuxer

          # Test health endpoint
          kubectl run health-check-$(date +%s) \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --image=curlimages/curl:latest \
            --restart=Never \
            --rm -i --tty \
            -- curl -f http://${{ env.HELM_RELEASE }}:8000/health

      - name: Run smoke tests
        run: |
          # Run basic API tests against staging
          kubectl run smoke-test-$(date +%s) \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --image=ghcr.io/${{ github.repository_owner }}/modelmuxer:${{ github.event.inputs.image_tag || 'develop' }} \
            --restart=Never \
            --env="API_BASE_URL=http://${{ env.HELM_RELEASE }}:8000" \
            --env="ENVIRONMENT=staging" \
            --command -- python -m pytest tests/smoke/ -v

      - name: Update deployment status
        run: |
          # Create deployment record
          kubectl create configmap deployment-info-$(date +%s) \
            --namespace=${{ env.KUBE_NAMESPACE }} \
            --from-literal=image_tag="${{ github.event.inputs.image_tag || 'develop' }}" \
            --from-literal=deployed_at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            --from-literal=deployed_by="${{ github.actor }}" \
            --from-literal=commit_sha="${{ github.sha }}" \
            --from-literal=environment="${{ env.ENVIRONMENT }}"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üöÄ Successfully deployed to staging environment
            Environment: ${{ env.ENVIRONMENT }}
            Image: ${{ github.event.inputs.image_tag || 'develop' }}
            URL: https://staging-api.modelmuxer.com
            Deployed by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.deploy.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå Staging deployment failed
            Environment: ${{ env.ENVIRONMENT }}
            Image: ${{ github.event.inputs.image_tag || 'develop' }}
            Workflow: ${{ github.workflow }}
            Actor: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment comment (if PR)
        if: github.event_name == 'pull_request' && needs.deploy.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Staging Deployment Successful**

              - **Environment**: staging
              - **URL**: https://staging-api.modelmuxer.com
              - **Image**: ${{ github.event.inputs.image_tag || 'develop' }}
              - **Deployed at**: ${new Date().toISOString()}

              You can now test your changes in the staging environment.`
            })
