### Preferred Language & Style

- **Default language**: Python
- **Code formatting**: Black
- **Linting**: Ruff
- **Type checking**: MyPy
- **Framework**: FastAPI

### Terminal and Environment

- **Default shell**: Always use zsh for terminal commands
- **Python version**: Use Python 3.11+ (as specified in pyproject.toml)
- **Package manager**: Poetry (preferred over pip)
- **Virtual environment**: Use Poetry's built-in virtual environment management
- **DO NOT manually create .venv directories** - let Poetry manage this
- **DO NOT remove .bandit, .snyk, .github/ directories** - these are project configuration files

### Environment Setup Commands

```bash
# Install Poetry (if not already installed)
pip3 install poetry

# Configure Poetry to use system Python (if pyenv issues)
poetry config virtualenvs.create false

# Install dependencies
poetry install

# Install with dev dependencies
poetry install --with dev

# Run commands with Poetry
poetry run python app/main.py
poetry run pytest
```

### Code Style & Architecture Guidelines

1. **Project Structure**: Follow the established `app/`, `core/`, `providers/`, `cache/`, `telemetry/`, `enterprise/`, `classification/`, `policy/` directory structure. Place new modules in the correct location.

2. **Configuration**: All environment variables and configs must be loaded through [app/config.py](mdc:app/config.py) or [app/config/enhanced_config.py](mdc:app/config/enhanced_config.py) using Pydantic BaseSettings. Use [app/settings.py](mdc:app/settings.py) for settings orchestration.

3. **Providers**: Provider adapters must implement the abstract interface in [app/providers/base.py](mdc:app/providers/base.py) and support retries, timeouts, and circuit breakers.

4. **Observability**: All new request-handling and provider-calling code must include OpenTelemetry tracing and Prometheus metrics. See [app/monitoring/metrics.py](mdc:app/monitoring/metrics.py), [app/monitoring/metrics_collector.py](mdc:app/monitoring/metrics_collector.py), and [app/telemetry/](mdc:app/telemetry/) for telemetry components.

5. **Testing**: Every new module requires unit tests; integration tests for provider calls and policy rules. See `tests/` directory and root-level `test_*.py` files.

6. **Documentation**: Use Google docstring format for all public functions and classes. Include type hints and comprehensive parameter descriptions.

7. **Error Handling**: Use custom exceptions from [app/core/exceptions.py](mdc:app/core/exceptions.py) and implement proper error handling with meaningful error messages.

8. **Logging**: Use structured logging with correlation IDs. Never log raw prompts or PII. See [app/telemetry/logging.py](mdc:app/telemetry/logging.py).

### Security Guidelines

- **No secrets or API keys in code**: Load from environment and secure vaults
- **PII Protection**: Do not log raw prompts or PII; redact or hash sensitive data. See [app/security/pii_protection.py](mdc:app/security/pii_protection.py)
- **Policy Enforcement**: Implement policy checks using [app/policy/rules.py](mdc:app/policy/rules.py) for compliance and safety
- **Authentication**: Use the authentication system in [app/auth.py](mdc:app/auth.py) and middleware in [app/middleware/auth_middleware.py](mdc:app/middleware/auth_middleware.py)

### Performance Guidelines

- **Caching**: Use appropriate caching strategies with [app/cache/](mdc:app/cache/) implementations
- **Database**: Use the database layer in [app/database.py](mdc:app/database.py) for persistent storage
- **Cost Tracking**: Integrate with [app/cost_tracker.py](mdc:app/cost_tracker.py) for budget management
- **Async/Await**: Use async patterns for I/O operations, especially for provider calls

### Enterprise Features

- **Organization Management**: Use [app/enterprise/organization_manager.py](mdc:app/enterprise/organization_manager.py) for multi-tenant features
- **Enterprise Models**: Extend [app/enterprise/models.py](mdc:app/enterprise/models.py) for enterprise-specific data structures

### Classification and ML

- **Prompt Classification**: Use [app/classification/prompt_classifier.py](mdc:app/classification/prompt_classifier.py) for intelligent routing
- **Embeddings**: Integrate with [app/classification/embeddings.py](mdc:app/classification/embeddings.py) for semantic analysis

### Middleware and Request Processing

- **Middleware Chain**: Follow the established middleware pattern in [app/middleware/](mdc:app/middleware/)
- **Rate Limiting**: Implement rate limiting using [app/middleware/rate_limit_middleware.py](mdc:app/middleware/rate_limit_middleware.py)
- **Request Validation**: Use Pydantic models for request/response validation

### Monitoring and Health

- **Health Checks**: Implement health checks using [app/monitoring/health_checker.py](mdc:app/monitoring/health_checker.py)
- **Metrics**: Add custom metrics for business logic using the metrics collector
- **Tracing**: Include OpenTelemetry spans for distributed tracing

### Code Quality

- **Type Hints**: Use comprehensive type hints throughout the codebase
- **Imports**: Organize imports (standard library, third-party, local) with proper grouping
- **Constants**: Define constants in appropriate modules and avoid magic numbers
- **Naming**: Use descriptive names for variables, functions, and classes
- **Comments**: Add comments for complex business logic, but prefer self-documenting code

---
