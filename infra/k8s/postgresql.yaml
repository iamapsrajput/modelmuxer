# ModelMuxer (c) 2025 Ajay Rajput
# Licensed under Business Source License 1.1 â€“ see LICENSE for details.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-primary
  namespace: modelmuxer
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
spec:
  serviceName: postgresql-primary
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: primary
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - name: postgresql
          containerPort: 5432
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=md5"
        envFrom:
        - secretRef:
            name: postgresql-credentials
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-hba
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: postgresql-hba
        configMap:
          name: postgresql-hba-config
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-read
  namespace: modelmuxer
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: read-replica
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: read-replica
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: read-replica
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgresql
        image: postgres:15-alpine
        ports:
        - name: postgresql
          containerPort: 5432
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: PGUSER
          value: replicator
        envFrom:
        - secretRef:
            name: postgresql-credentials
        command:
        - /bin/bash
        - -c
        - |
          # Wait for primary to be ready
          until pg_isready -h postgresql-primary -p 5432 -U $POSTGRES_USER; do
            echo "Waiting for primary database..."
            sleep 2
          done

          # Create base backup from primary
          pg_basebackup -h postgresql-primary -D /var/lib/postgresql/data/pgdata -U $POSTGRES_REPLICATION_USER -v -P -W

          # Configure as standby
          echo "standby_mode = 'on'" >> /var/lib/postgresql/data/pgdata/postgresql.conf
          echo "primary_conninfo = 'host=postgresql-primary port=5432 user=$POSTGRES_REPLICATION_USER'" >> /var/lib/postgresql/data/pgdata/postgresql.conf
          echo "trigger_file = '/tmp/promote_to_primary'" >> /var/lib/postgresql/data/pgdata/postgresql.conf

          # Start PostgreSQL
          postgres
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        volumeMounts:
        - name: postgresql-read-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgresql-read-data
        emptyDir:
          sizeLimit: 50Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-config
  namespace: modelmuxer
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: config
data:
  postgresql.conf: |
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200

    # Memory settings
    shared_buffers = 1GB
    effective_cache_size = 3GB
    work_mem = 16MB
    maintenance_work_mem = 256MB

    # WAL settings
    wal_level = replica
    max_wal_senders = 3
    max_replication_slots = 3
    wal_keep_segments = 64

    # Checkpoint settings
    checkpoint_completion_target = 0.9
    checkpoint_timeout = 15min
    max_wal_size = 2GB
    min_wal_size = 1GB

    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'mod'
    log_min_duration_statement = 1000

    # Performance
    random_page_cost = 1.1
    effective_io_concurrency = 200

    # Autovacuum
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 1min
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-hba-config
  namespace: modelmuxer
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: hba-config
data:
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             postgres                                peer
    local   all             all                                     peer
    host    all             all             127.0.0.1/32            md5
    host    all             all             ::1/128                 md5
    host    all             all             10.0.0.0/8              md5
    host    all             all             172.16.0.0/12           md5
    host    all             all             192.168.0.0/16          md5
    host    replication     replicator      10.0.0.0/8              md5
    host    replication     replicator      172.16.0.0/12           md5
    host    replication     replicator      192.168.0.0/16          md5
